<div class="relative">
  <input
    type="text"
    placeholder="Search products..."
    class="w-full md:w-64 px-4 py-2 pl-10 pr-4 text-gray-700 bg-gray-50 border border-gray-300 rounded-lg focus:outline-none focus:border-primary-500 focus:bg-white transition-colors"
    id="search-input"
  >
  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
  </div>
  <div id="search-results" class="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg mt-1 hidden z-50 max-h-96 overflow-y-auto">
    <!-- Search results will be populated here -->
  </div>
</div>

<script>
  import Fuse from 'fuse.js';
  
  class SearchComponent {
    constructor() {
      this.searchInput = document.getElementById('search-input');
      this.searchResults = document.getElementById('search-results');
      this.fuse = null;
      this.posts = [];
      
      this.init();
    }
    
    async init() {
      if (!this.searchInput || !this.searchResults) return;
      
      try {
        // Fetch posts data
        const response = await fetch('/search-data.json');
        this.posts = await response.json();
        
        // Initialize Fuse.js
        this.fuse = new Fuse(this.posts, {
          keys: ['title', 'description', 'tags', 'category'],
          threshold: 0.3,
          includeMatches: true,
        });
        
        // Event listeners
        this.searchInput.addEventListener('input', this.handleSearch.bind(this));
        this.searchInput.addEventListener('focus', this.handleFocus.bind(this));
        document.addEventListener('click', this.handleClickOutside.bind(this));
        
      } catch (error) {
        console.error('Failed to initialize search:', error);
      }
    }
    
    handleSearch(event) {
      const query = event.target.value.trim();
      
      if (query.length < 2) {
        this.hideResults();
        return;
      }
      
      const results = this.fuse.search(query);
      this.displayResults(results.slice(0, 5));
    }
    
    handleFocus() {
      if (this.searchResults.children.length > 0) {
        this.showResults();
      }
    }
    
    handleClickOutside(event) {
      if (!this.searchInput.contains(event.target) && !this.searchResults.contains(event.target)) {
        this.hideResults();
      }
    }
    
    displayResults(results) {
      if (results.length === 0) {
        this.searchResults.innerHTML = '<div class="p-4 text-gray-500">No results found</div>';
      } else {
        this.searchResults.innerHTML = results.map(result => {
          const post = result.item;
          return `
            <a href="${post.url}" class="block p-4 hover:bg-gray-50 border-b border-gray-100 last:border-b-0">
              <div class="font-medium text-gray-900">${post.title}</div>
              <div class="text-sm text-gray-600 mt-1">${post.description}</div>
              <div class="text-xs text-primary-600 mt-1">${post.category}</div>
            </a>
          `;
        }).join('');
      }
      
      this.showResults();
    }
    
    showResults() {
      this.searchResults.classList.remove('hidden');
    }
    
    hideResults() {
      this.searchResults.classList.add('hidden');
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SearchComponent();
  });
</script>